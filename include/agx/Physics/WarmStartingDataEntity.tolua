/*
Copyright 2007-2023. Algoryx Simulation AB.

All AGX source code, intellectual property, documentation, sample code,
tutorials, scene files and technical white papers, are copyrighted, proprietary
and confidential material of Algoryx Simulation AB. You may not download, read,
store, distribute, publish, copy or otherwise disseminate, use or expose this
material unless having a written signed agreement with Algoryx Simulation AB, or
having been advised so by Algoryx Simulation AB for a time limited evaluation,
or having purchased a valid commercial license from Algoryx Simulation AB.

Algoryx Simulation AB disclaims all responsibilities for loss or damage caused
from using this software, unless otherwise stated in written agreements with
Algoryx Simulation AB.
*/

//////////////////////////////////////////////////
// AUTOMATICALLY GENERATED ENTITY, DO NOT EDIT! //
//////////////////////////////////////////////////

$#define AGX_GENERATED_TOLUA_WRAPPER
$#include <agx/Physics/WarmStartingDataEntity.h>
$ifile "../../../LuaPlugins/plugins/agx/tolua/agx/Math.tolua"

namespace agx
{
  namespace Physics
  {
    class WarmStartingDataPtr : public agxData::EntityPtr
    {
    public:

      WarmStartingDataPtr(agxData::EntityStorage *storage, size_t id);
      agx::Vec3 getLocalForce();
      agx::Vec4i8 getIndexSet();
      agx::Vec3 getShape1pos();
      agx::Vec3 getShape2pos();
      agx::Vec3 getShape1normal();


      void setLocalForce(agx::Vec3 value);
      void setIndexSet(agx::Vec4i8 value);
      void setShape1pos(agx::Vec3 value);
      void setShape2pos(agx::Vec3 value);
      void setShape1normal(agx::Vec3 value);
    };


    class WarmStartingDataPtrVector {
      WarmStartingDataPtrVector();
      void push_back(WarmStartingDataPtr);
      void clear();
      WarmStartingDataPtr at( unsigned int ) const;
      WarmStartingDataPtr front() const;
      WarmStartingDataPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };


    class WarmStartingDataPtrArray {
      WarmStartingDataPtrArray();
      WarmStartingDataPtr at( unsigned int ) const;
      WarmStartingDataPtr front() const;
      WarmStartingDataPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };

  }
}

