/*
Copyright 2007-2023. Algoryx Simulation AB.

All AGX source code, intellectual property, documentation, sample code,
tutorials, scene files and technical white papers, are copyrighted, proprietary
and confidential material of Algoryx Simulation AB. You may not download, read,
store, distribute, publish, copy or otherwise disseminate, use or expose this
material unless having a written signed agreement with Algoryx Simulation AB, or
having been advised so by Algoryx Simulation AB for a time limited evaluation,
or having purchased a valid commercial license from Algoryx Simulation AB.

Algoryx Simulation AB disclaims all responsibilities for loss or damage caused
from using this software, unless otherwise stated in written agreements with
Algoryx Simulation AB.
*/

//////////////////////////////////////////////////
// AUTOMATICALLY GENERATED ENTITY, DO NOT EDIT! //
//////////////////////////////////////////////////

$#define AGX_GENERATED_TOLUA_WRAPPER
$#include <agx/Physics/GeometryContactEntity.h>
$ifile "../../../LuaPlugins/plugins/agx/tolua/agx/Math.tolua"

namespace agx
{
  namespace Physics
  {
    class GeometryContactPtr : public agx::Physics::ContactPtr
    {
    public:

      GeometryContactPtr(agxData::EntityStorage *storage, size_t id);
      agx::Physics::GeometryPtr getGeometry1();
      agx::Physics::GeometryPtr getGeometry2();
      agx::Physics::RigidBodyPtr getBody1();
      agx::Physics::RigidBodyPtr getBody2();
      agx::Physics::ContactPointPtrArray getPoints();
      agx::Physics::BroadPhasePairPtr getBroadPhasePair();
      agx::Bool getEnabled();
      agx::Bool getImmediately();
      agx::Bool getHasSurfaceVelocity();
      agx::Bool getHasInternalMaterial();
      agx::Bool getUsingPPGS();


      void setGeometry1(agx::Physics::GeometryPtr value);
      void setGeometry2(agx::Physics::GeometryPtr value);
      void setBody1(agx::Physics::RigidBodyPtr value);
      void setBody2(agx::Physics::RigidBodyPtr value);
      void setPoints(agxData::Array< agx::Physics::ContactPointPtr > value);
      void setBroadPhasePair(agx::Physics::BroadPhasePairPtr value);
      void setEnabled(agx::Bool value);
      void setImmediately(agx::Bool value);
      void setHasSurfaceVelocity(agx::Bool value);
      void setHasInternalMaterial(agx::Bool value);
      void setUsingPPGS(agx::Bool value);
    };


    class GeometryContactPtrVector {
      GeometryContactPtrVector();
      void push_back(GeometryContactPtr);
      void clear();
      GeometryContactPtr at( unsigned int ) const;
      GeometryContactPtr front() const;
      GeometryContactPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };


    class GeometryContactPtrArray {
      GeometryContactPtrArray();
      GeometryContactPtr at( unsigned int ) const;
      GeometryContactPtr front() const;
      GeometryContactPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };

  }
}

