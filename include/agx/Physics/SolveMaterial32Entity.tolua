/*
Copyright 2007-2023. Algoryx Simulation AB.

All AGX source code, intellectual property, documentation, sample code,
tutorials, scene files and technical white papers, are copyrighted, proprietary
and confidential material of Algoryx Simulation AB. You may not download, read,
store, distribute, publish, copy or otherwise disseminate, use or expose this
material unless having a written signed agreement with Algoryx Simulation AB, or
having been advised so by Algoryx Simulation AB for a time limited evaluation,
or having purchased a valid commercial license from Algoryx Simulation AB.

Algoryx Simulation AB disclaims all responsibilities for loss or damage caused
from using this software, unless otherwise stated in written agreements with
Algoryx Simulation AB.
*/

//////////////////////////////////////////////////
// AUTOMATICALLY GENERATED ENTITY, DO NOT EDIT! //
//////////////////////////////////////////////////

$#define AGX_GENERATED_TOLUA_WRAPPER
$#include <agx/Physics/SolveMaterial32Entity.h>
$ifile "../../../LuaPlugins/plugins/agx/tolua/agx/Math.tolua"

namespace agx
{
  namespace Physics
  {
    class SolveMaterial32Ptr : public agxData::EntityPtr
    {
    public:

      SolveMaterial32Ptr(agxData::EntityStorage *storage, size_t id);
      agx::Real32 getAdhesiveImpulse();
      agx::Vec2f getFriction();


      void setAdhesiveImpulse(agx::Real32 value);
      void setFriction(agx::Vec2f value);
    };


    class SolveMaterial32PtrVector {
      SolveMaterial32PtrVector();
      void push_back(SolveMaterial32Ptr);
      void clear();
      SolveMaterial32Ptr at( unsigned int ) const;
      SolveMaterial32Ptr front() const;
      SolveMaterial32Ptr back() const;
      unsigned int size() const;
      bool empty() const;
    };


    class SolveMaterial32PtrArray {
      SolveMaterial32PtrArray();
      SolveMaterial32Ptr at( unsigned int ) const;
      SolveMaterial32Ptr front() const;
      SolveMaterial32Ptr back() const;
      unsigned int size() const;
      bool empty() const;
    };

  }
}

