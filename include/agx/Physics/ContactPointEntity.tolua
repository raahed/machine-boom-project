/*
Copyright 2007-2023. Algoryx Simulation AB.

All AGX source code, intellectual property, documentation, sample code,
tutorials, scene files and technical white papers, are copyrighted, proprietary
and confidential material of Algoryx Simulation AB. You may not download, read,
store, distribute, publish, copy or otherwise disseminate, use or expose this
material unless having a written signed agreement with Algoryx Simulation AB, or
having been advised so by Algoryx Simulation AB for a time limited evaluation,
or having purchased a valid commercial license from Algoryx Simulation AB.

Algoryx Simulation AB disclaims all responsibilities for loss or damage caused
from using this software, unless otherwise stated in written agreements with
Algoryx Simulation AB.
*/

//////////////////////////////////////////////////
// AUTOMATICALLY GENERATED ENTITY, DO NOT EDIT! //
//////////////////////////////////////////////////

$#define AGX_GENERATED_TOLUA_WRAPPER
$#include <agx/Physics/ContactPointEntity.h>
$ifile "../../../LuaPlugins/plugins/agx/tolua/agx/Math.tolua"

namespace agx
{
  namespace Physics
  {
    class ContactPointPtr : public agxData::EntityPtr
    {
    public:

      ContactPointPtr(agxData::EntityStorage *storage, size_t id);
      agx::Vec3 getPoint();
      agx::Vec3f getNormal();
      agx::Vec3f getTangentU();
      agx::Vec3f getTangentV();
      agx::Real getDepth();
      agx::UInt8 getState();
      agx::Vec3f getVelocity();
      agx::Vec3 getLocalForce();
      agx::Vec4i8 getIndexSet();
      agx::Real getMaxNormalForce();
      agx::Bool getEnabled();
      agx::UInt32 getFaceIndex1();
      agx::UInt32 getFaceIndex2();
      agx::UInt8 getFaceFeature1();
      agx::UInt8 getFaceFeature2();
      agx::Physics::Geometry::ShapePtr getShape1();
      agx::Physics::Geometry::ShapePtr getShape2();
      agx::Real getArea();
      agx::Real getElasticRestLengthShape1();
      agx::Real getElasticRestLengthShape2();


      void setPoint(agx::Vec3 value);
      void setNormal(agx::Vec3f value);
      void setTangentU(agx::Vec3f value);
      void setTangentV(agx::Vec3f value);
      void setDepth(agx::Real value);
      void setState(agx::UInt8 value);
      void setVelocity(agx::Vec3f value);
      void setLocalForce(agx::Vec3 value);
      void setIndexSet(agx::Vec4i8 value);
      void setMaxNormalForce(agx::Real value);
      void setEnabled(agx::Bool value);
      void setFaceIndex1(agx::UInt32 value);
      void setFaceIndex2(agx::UInt32 value);
      void setFaceFeature1(agx::UInt8 value);
      void setFaceFeature2(agx::UInt8 value);
      void setShape1(agx::Physics::Geometry::ShapePtr value);
      void setShape2(agx::Physics::Geometry::ShapePtr value);
      void setArea(agx::Real value);
      void setElasticRestLengthShape1(agx::Real value);
      void setElasticRestLengthShape2(agx::Real value);
    };


    class ContactPointPtrVector {
      ContactPointPtrVector();
      void push_back(ContactPointPtr);
      void clear();
      ContactPointPtr at( unsigned int ) const;
      ContactPointPtr front() const;
      ContactPointPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };


    class ContactPointPtrArray {
      ContactPointPtrArray();
      ContactPointPtr at( unsigned int ) const;
      ContactPointPtr front() const;
      ContactPointPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };

  }
}

