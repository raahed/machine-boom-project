/*
Copyright 2007-2023. Algoryx Simulation AB.

All AGX source code, intellectual property, documentation, sample code,
tutorials, scene files and technical white papers, are copyrighted, proprietary
and confidential material of Algoryx Simulation AB. You may not download, read,
store, distribute, publish, copy or otherwise disseminate, use or expose this
material unless having a written signed agreement with Algoryx Simulation AB, or
having been advised so by Algoryx Simulation AB for a time limited evaluation,
or having purchased a valid commercial license from Algoryx Simulation AB.

Algoryx Simulation AB disclaims all responsibilities for loss or damage caused
from using this software, unless otherwise stated in written agreements with
Algoryx Simulation AB.
*/

//////////////////////////////////////////////////
// AUTOMATICALLY GENERATED ENTITY, DO NOT EDIT! //
//////////////////////////////////////////////////

$#define AGX_GENERATED_TOLUA_WRAPPER
$#include <agx/Physics/ConstraintRowEntity.h>
$ifile "../../../LuaPlugins/plugins/agx/tolua/agx/Math.tolua"

namespace agx
{
  namespace Physics
  {
    class ConstraintRowPtr : public agxData::EntityPtr
    {
    public:

      ConstraintRowPtr(agxData::EntityStorage *storage, size_t id);
      agx::Bool getHolonomic();
      agx::Real getDamping();
      agx::Real getEpsilon();
      agx::Real getLambda();
      agx::Real getTotalLambda();
      agx::Real getRhs();
      agx::Real getInvD();
      agx::Real getImpactSpeed();
      agx::Real getVelocity();
      agx::Real getViolation();
      agx::RangeReal getBound();
      agx::Real getResidual();
      agx::Int8 getIndexSetState();


      void setHolonomic(agx::Bool value);
      void setDamping(agx::Real value);
      void setEpsilon(agx::Real value);
      void setLambda(agx::Real value);
      void setTotalLambda(agx::Real value);
      void setRhs(agx::Real value);
      void setInvD(agx::Real value);
      void setImpactSpeed(agx::Real value);
      void setVelocity(agx::Real value);
      void setViolation(agx::Real value);
      void setBound(agx::RangeReal value);
      void setResidual(agx::Real value);
      void setIndexSetState(agx::Int8 value);
    };


    class ConstraintRowPtrVector {
      ConstraintRowPtrVector();
      void push_back(ConstraintRowPtr);
      void clear();
      ConstraintRowPtr at( unsigned int ) const;
      ConstraintRowPtr front() const;
      ConstraintRowPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };


    class ConstraintRowPtrArray {
      ConstraintRowPtrArray();
      ConstraintRowPtr at( unsigned int ) const;
      ConstraintRowPtr front() const;
      ConstraintRowPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };

  }
}

