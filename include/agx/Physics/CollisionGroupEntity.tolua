/*
Copyright 2007-2023. Algoryx Simulation AB.

All AGX source code, intellectual property, documentation, sample code,
tutorials, scene files and technical white papers, are copyrighted, proprietary
and confidential material of Algoryx Simulation AB. You may not download, read,
store, distribute, publish, copy or otherwise disseminate, use or expose this
material unless having a written signed agreement with Algoryx Simulation AB, or
having been advised so by Algoryx Simulation AB for a time limited evaluation,
or having purchased a valid commercial license from Algoryx Simulation AB.

Algoryx Simulation AB disclaims all responsibilities for loss or damage caused
from using this software, unless otherwise stated in written agreements with
Algoryx Simulation AB.
*/

//////////////////////////////////////////////////
// AUTOMATICALLY GENERATED ENTITY, DO NOT EDIT! //
//////////////////////////////////////////////////

$#define AGX_GENERATED_TOLUA_WRAPPER
$#include <agx/Physics/CollisionGroupEntity.h>
$ifile "../../../LuaPlugins/plugins/agx/tolua/agx/Math.tolua"

namespace agx
{
  namespace Physics
  {
    class CollisionGroupPtr : public agxData::EntityPtr
    {
    public:

      CollisionGroupPtr(agxData::EntityStorage *storage, size_t id);
      agx::UInt32 getId();
      agx::Name getName();
      agx::HashSet< agx::Physics::CollisionGroupSetPtr > getSets();
      agx::HashSet< agx::Physics::CollisionGroupPtr > getDisabledGroups();
      agxCollide::CollisionGroupManager* getManager();


      void setId(agx::UInt32 value);
      void setName(agx::Name value);
      void setSets(agx::HashSet< agx::Physics::CollisionGroupSetPtr > value);
      void setDisabledGroups(agx::HashSet< agx::Physics::CollisionGroupPtr > value);
      void setManager(agxCollide::CollisionGroupManager* value);
    };


    class CollisionGroupPtrVector {
      CollisionGroupPtrVector();
      void push_back(CollisionGroupPtr);
      void clear();
      CollisionGroupPtr at( unsigned int ) const;
      CollisionGroupPtr front() const;
      CollisionGroupPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };


    class CollisionGroupPtrArray {
      CollisionGroupPtrArray();
      CollisionGroupPtr at( unsigned int ) const;
      CollisionGroupPtr front() const;
      CollisionGroupPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };

  }
}

