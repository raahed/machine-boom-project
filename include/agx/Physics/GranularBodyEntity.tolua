/*
Copyright 2007-2023. Algoryx Simulation AB.

All AGX source code, intellectual property, documentation, sample code,
tutorials, scene files and technical white papers, are copyrighted, proprietary
and confidential material of Algoryx Simulation AB. You may not download, read,
store, distribute, publish, copy or otherwise disseminate, use or expose this
material unless having a written signed agreement with Algoryx Simulation AB, or
having been advised so by Algoryx Simulation AB for a time limited evaluation,
or having purchased a valid commercial license from Algoryx Simulation AB.

Algoryx Simulation AB disclaims all responsibilities for loss or damage caused
from using this software, unless otherwise stated in written agreements with
Algoryx Simulation AB.
*/

//////////////////////////////////////////////////
// AUTOMATICALLY GENERATED ENTITY, DO NOT EDIT! //
//////////////////////////////////////////////////

$#define AGX_GENERATED_TOLUA_WRAPPER
$#include <agx/Physics/GranularBodyEntity.h>
$ifile "../../../LuaPlugins/plugins/agx/tolua/agx/Math.tolua"

namespace agx
{
  namespace Physics
  {
    class GranularBodyPtr : public agx::Physics::ParticlePtr
    {
    public:

      GranularBodyPtr(agxData::EntityStorage *storage, size_t id);
      agx::Vec3 getAngularVelocity();
      agx::Vec3 getOldAngularVelocity();
      agx::Quat getRotation();
      agx::Vec3 getTorque();
      agx::Real getInertia();
      agx::Real getInvInertia();

      void integratePosition(const agx::Real& clock_timeStep);
      void integrateVelocity(const agx::Real& clock_timeStep);
      void setAngularVelocity(const agx::Vec3& angularVelocity);
      void setMass(const agx::Real& mass);
      void setMaterial(const agx::Physics::MaterialPtr& material);
      void setRadius(const agx::Real& radius);

      void setOldAngularVelocity(agx::Vec3 value);
      void setRotation(agx::Quat value);
      void setTorque(agx::Vec3 value);
      void setInertia(agx::Real value);
      void setInvInertia(agx::Real value);
    };


    class GranularBodyPtrVector {
      GranularBodyPtrVector();
      void push_back(GranularBodyPtr);
      void clear();
      GranularBodyPtr at( unsigned int ) const;
      GranularBodyPtr front() const;
      GranularBodyPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };


    class GranularBodyPtrArray {
      GranularBodyPtrArray();
      GranularBodyPtr at( unsigned int ) const;
      GranularBodyPtr front() const;
      GranularBodyPtr back() const;
      unsigned int size() const;
      bool empty() const;
    };

  }
}

