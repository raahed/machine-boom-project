/*
Copyright 2007-2023. Algoryx Simulation AB.

All AGX source code, intellectual property, documentation, sample code,
tutorials, scene files and technical white papers, are copyrighted, proprietary
and confidential material of Algoryx Simulation AB. You may not download, read,
store, distribute, publish, copy or otherwise disseminate, use or expose this
material unless having a written signed agreement with Algoryx Simulation AB, or
having been advised so by Algoryx Simulation AB for a time limited evaluation,
or having purchased a valid commercial license from Algoryx Simulation AB.

Algoryx Simulation AB disclaims all responsibilities for loss or damage caused
from using this software, unless otherwise stated in written agreements with
Algoryx Simulation AB.
*/

//////////////////////////////////////////////////
// AUTOMATICALLY GENERATED ENTITY, DO NOT EDIT! //
//////////////////////////////////////////////////

$#define AGX_GENERATED_TOLUA_WRAPPER
$#include <agx/TaskTimingEntity.h>
$ifile "../../LuaPlugins/plugins/agx/tolua/agx/Math.tolua"

namespace agx
{
  class TaskTimingPtr : public agxData::EntityPtr
  {
  public:

    TaskTimingPtr(agxData::EntityStorage *storage, size_t id);
    agx::Name getName();
    agx::Name getImplementation();
    agx::UInt getNumSubtasks();
    agx::Real64 getWallTime();
    agx::Real64 getComputeCost();
    agx::Real64 getOverheadTime();


    void setName(agx::Name value);
    void setImplementation(agx::Name value);
    void setNumSubtasks(agx::UInt value);
    void setWallTime(agx::Real64 value);
    void setComputeCost(agx::Real64 value);
    void setOverheadTime(agx::Real64 value);
  };


  class TaskTimingPtrVector {
    TaskTimingPtrVector();
    void push_back(TaskTimingPtr);
    void clear();
    TaskTimingPtr at( unsigned int ) const;
    TaskTimingPtr front() const;
    TaskTimingPtr back() const;
    unsigned int size() const;
    bool empty() const;
  };


  class TaskTimingPtrArray {
    TaskTimingPtrArray();
    TaskTimingPtr at( unsigned int ) const;
    TaskTimingPtr front() const;
    TaskTimingPtr back() const;
    unsigned int size() const;
    bool empty() const;
  };

}

